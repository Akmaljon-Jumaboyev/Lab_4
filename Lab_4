//Classes
//Task 1
class Car {
  String make;
  String model;
  int year;

  
  Car(this.make, this.model, this.year);

 
  void displayInfo() {
    print('Car Information: $year $make $model');
  }
}

void main() {
  
  var myCar = Car('Toyota', 'Corolla', 2022);

  
  myCar.displayInfo(); 
}
--------------------------------------------------------------------
//Task 2
 class Book {
  String title;
  String author;
  int numberOfPages;

  
  Book(this.title, this.author, this.numberOfPages);
}

void main() {
  
  var myBook = Book('Tohir va Zuhra', 'Sayadi', 208);
  print('Title: ${myBook.title}');
  print('Author: ${myBook.author}');
  print('Pages: ${myBook.numberOfPages}');
}
-------------------------------------------------------------------
//Task 3
  class Student {
  String name;
  int age;
  List<double> grades;

  
  Student(this.name, this.age, this.grades);

  
  double calculateAverageGrade() {
    if (grades.isEmpty) return 0.0;
    double sum = grades.reduce((a, b) => a + b);
    return sum / grades.length;
  }
}

void main() {
  
  var student = Student('Timur', 20, [60, 92.3, 78.5, 92]);

  
  print('Student: ${student.name}, Age: ${student.age}');
  print('Grades: ${student.grades}');
  print('Average Grade: ${student.calculateAverageGrade()}');
}
--------------------------------------------------------------------
//Task 4
  class BankAccount {
  String accountNumber;
  String accountHolderName;
  double balance;

  BankAccount(this.accountNumber, this.accountHolderName, this.balance);

  void deposit(double amount) {
    balance += amount;
    print('Deposited: $amount | Balance: $balance');
  }

  void withdraw(double amount) {
    if (amount > balance) {
      print('Error: Not enough funds.');
    } else {
      balance -= amount;
      print('Withdrew: $amount | Balance: $balance');
    }
  }
}

void main() {
  var account = BankAccount('12345', 'Alice', 500);

  account.deposit(200);   
  account.withdraw(100);  
  account.withdraw(700);
}
--------------------------------------------------------------------
  //Task 5
class Rectangle {
  double width;
  double height;

  Rectangle(this.width, this.height);

  double get area => width * height;
  double get perimeter => 2 * (width + height);
}

void main() {
  var rect = Rectangle(5, 3);
  print('Width: ${rect.width}');
  print('Height: ${rect.height}');
  print('Area: ${rect.area}');       
  print('Perimeter: ${rect.perimeter}');
} 





--------------------------------------------------------------------
// 2 ENUMS
//Task 1
enum DaysOfWeek {
  monday,
  tuesday,
  wednesday,
  thursday,
  friday,
  saturday,
  sunday
}

void checkDay(DaysOfWeek day) {
  switch (day) {
    case DaysOfWeek.saturday:
    case DaysOfWeek.sunday:
      print('${day.name} is on the weekend');
      break;
    default:
      print('${day.name} is a weekday.');
  }
}

void main() {
  checkDay(DaysOfWeek.monday);
  checkDay(DaysOfWeek.saturday);
}
--------------------------------------------------------------------
//Task 2
enum OrderStatus {
  pending,
  processing,
  shipped,
  delivered,
  cancelled
}

void main() {
  
  OrderStatus status = OrderStatus.processing;


  print('Order status: ${status.name}');
}
--------------------------------------------------------------------
//Task 3
enum TrafficLight { red, yellow, green }

String getAction(TrafficLight light) {
  switch (light) {
    case TrafficLight.red:
      return "Stop";
    case TrafficLight.yellow:
      return "Caution";
    case TrafficLight.green:
      return "Go";
  }
}

void main() {
  print('Red light: ${getAction(TrafficLight.red)}');
  print('Yellow light: ${getAction(TrafficLight.yellow)}');
  print('Green light: ${getAction(TrafficLight.green)}');
} 
--------------------------------------------------------------------
//Task 4 
enum UserRole { admin, editor, guest }

class User {
  final String name;
  final UserRole role;

  User(this.name, this.role);

  
  bool hasEditPermission() {
    return role == UserRole.admin || role == UserRole.editor;
  }
}

void main() {
  var alice = User('Alice', UserRole.admin);
  var bob   = User('Bob', UserRole.editor);
  var carol = User('Carol', UserRole.guest);

  print('${alice.name} (${alice.role.name}) can edit: ${alice.hasEditPermission()}');
  print('${bob.name}   (${bob.role.name}) can edit: ${bob.hasEditPermission()}');
  print('${carol.name} (${carol.role.name}) can edit: ${carol.hasEditPermission()}');
}
--------------------------------------------------------------------
//Task 5
enum TrafficLight {
  red(30),
  yellow(5),
  green(45);

  final int durationInSeconds;
  const TrafficLight(this.durationInSeconds);
}

void main() {
  for (var light in TrafficLight.values) {
    print('${light.name}: ${light.durationInSeconds} seconds');
  }
}







--------------------------------------------------------------------
// 3 Inheritance
//Task 1
class Vehicle {
  String make;
  String model;

  Vehicle(this.make, this.model);

  void display() {
    print('Vehicle: $make $model');
  }
}

class Car extends Vehicle {
  int numberOfDoors;

  Car(String make, String model, this.numberOfDoors) : super(make, model);

  @override
  void display() {
    super.display(); 
    print('Doors: $numberOfDoors');
  }
}

void main() {
  var myCar = Car('Chevrolet', 'Cobalt', 4);
  myCar.display();
}
--------------------------------------------------------------------
//Task 2
class Animal {
  void makeSound() {
    print('Some generic animal sound');
  }
}

class Dog extends Animal {
  @override
  void makeSound() {
    print('Woof!');
  }
}


class Cat extends Animal {
  @override
  void makeSound() {
    print('Meow!');
  }
}

void main() {
  var dog = Dog();
  var cat = Cat();

  dog.makeSound(); 
  cat.makeSound(); 
}
--------------------------------------------------------------------
//Task 3
class Shape {
  String color;

  Shape(this.color);
}


class Circle extends Shape {
  double radius;

  Circle(String color, this.radius) : super(color);
}


class Square extends Shape {
  double sideLength;

  Square(String color, this.sideLength) : super(color);
}

void main() {
  var circle = Circle('Red', 5.0);
  var square = Square('Blue', 4.0);

  print('Circle > Color: ${circle.color}, Radius: ${circle.radius}');
  print('Square > Color: ${square.color}, Side length: ${square.sideLength}');
}
--------------------------------------------------------------------
//Task 4
class Employee {
  String name;
  double baseSalary;

  Employee(this.name, this.baseSalary);

  double calculateSalary() {
    return baseSalary;
  }
}


class Manager extends Employee {
  double bonus;

  Manager(String name, double baseSalary, this.bonus) : super(name, baseSalary);

  @override
  double calculateSalary() {
    return baseSalary + bonus;
  }
}

void main() {
  var emp = Employee('Alice', 3000);
  var mgr = Manager('Bob', 4000, 1500);

  print('${emp.name} salary: \$${emp.calculateSalary()}');
  print('${mgr.name} salary: \$${mgr.calculateSalary()}');
}
--------------------------------------------------------------------
//Task 5
class LibraryItem {
  final String title;
  final int id;
  LibraryItem(this.title, this.id);

  String getDetails() => 'Title: "$title", ID: $id';
}

class Book extends LibraryItem {
  final String author;
  Book(String title, int id, this.author) : super(title, id);

  @override
  String getDetails() =>
      'Book — Title: "$title", ID: $id, Author: $author';
}

class DVD extends LibraryItem {
  final String director;
  DVD(String title, int id, this.director) : super(title, id);

  @override
  String getDetails() =>
      'DVD  — Title: "$title", ID: $id, Director: $director';
}

void main() {
  final book = Book('The Great Gatsby', 101, 'Scott Fitzgerald');
  final dvd  = DVD('Inception', 202, 'Christopher Nolan');

  print(book.getDetails());
  print(dvd.getDetails());
}







--------------------------------------------------------------------
//4 Mixins
//Task 1
mixin Swimmer {
  void swim() {
    print('Moving through the water...');
  }
}

class Human with Swimmer {
  String name;
  Human(this.name);
}

class Fish with Swimmer {
  String species;
  Fish(this.species);
}

void main() {
  var person = Human('Alice');
  var fish = Fish('Tuna');

  person.swim();
  fish.swim();
}
--------------------------------------------------------------------
//Task 2
mixin Flyer {
  void fly() {
    print('Taking off!');
  }
}

class Bird with Flyer {
  String species;
  Bird(this.species);
}

class Plane with Flyer {
  String model;
  Plane(this.model);
}

void main() {
  var sparrow = Bird('Sparrow');
  var boeing = Plane('Boeing 747');

  sparrow.fly(); 
  boeing.fly();  
}
--------------------------------------------------------------------
//Task 3
mixin Logger {
  void log(String message) {
    print('[LOG] $message');
  }
}

class DataService with Logger {
  void fetchData() {
    log('Fetching data...');
    log('Data fetched successfully.');
  }
}
void main() {
  var service = DataService();
  service.fetchData();
}
--------------------------------------------------------------------
//Task 4
mixin Validator {
  bool isEmailValid(String email) => email.contains('@');
  bool isPasswordStrong(String password) => password.length >= 8;
}

class UserSignup with Validator {
  void validateAndPrint(String email, String password) {
    print('Email "$email" is ${isEmailValid(email) ? 'valid' : 'invalid'}.');
    print('Password is ${isPasswordStrong(password) ? 'strong' : 'weak'} (>= 8 chars).');
  }
}
void main() {
  final signup = UserSignup();

  signup.validateAndPrint('user@example.com', 'password123');
  signup.validateAndPrint('bad-email', 'short');
}
--------------------------------------------------------------------
//Task 5
mixin Performer {
  void perform() => print('Performing...');
}

mixin Musician {
  void playInstrument() => print('Playing instrument...');
}

class Artist {
  final String name;
  Artist(this.name);
}

class Dancer extends Artist with Performer {
  Dancer(String name) : super(name);
}

class Guitarist extends Artist with Performer, Musician {
  Guitarist(String name) : super(name);
}

void main() {
  final d = Dancer('Maya');
  final g = Guitarist('Carlos');

  d.perform();    
  g.playInstrument(); 
  g.perform();         
}
--------------------------------------------------------------------
//5 Polymorphism
//Task 2
class Weapon {
  void action() {
    print('Using a weapon...');
  }
}
class Sword extends Weapon {
  @override
  void action() {
    print('Swinging!');
  }
}
class Bow extends Weapon {
  @override
  void action() {
    print('Firing!');
  }
}
void main() {
    List<Weapon> arsenal = [Sword(), Bow()];
  for (var weapon in arsenal) {
    weapon.action();
  }
}
--------------------------------------------------------------------
//Task 3
class Animal {
  void eat() {
    print('Animal is eating...');
  }
}
class Lion extends Animal {
  @override
  void eat() {
    print('Lion Eating meat.');
  }
}
class Goat extends Animal {
  @override
  void eat() {
    print('Goat Eating grass.');
  }
}
void feed(Animal animal) {
  animal.eat();
}
void main() {
  var lion = Lion();
  var goat = Goat();

  feed(lion); 
  feed(goat); 
}
--------------------------------------------------------------------
//Task 4

abstract class PaymentMethod {
  void pay(double amount);
}
class CreditCard implements PaymentMethod {
  @override
  void pay(double amount) {
    print('Paid \$${amount.toStringAsFixed(2)} with Credit Card.');
  }
}
class PayPal implements PaymentMethod {
  @override
  void pay(double amount) {
   print('Paid \$${amount.toStringAsFixed(2)} via PayPal.');
  }
}
// Function that accepts any PaymentMethod
void processPayment(PaymentMethod method, double amount) {
  method.pay(amount);
}
void main() {
  var card = CreditCard();
  var paypal = PayPal();
  processPayment(card, 50.0);
  processPayment(paypal, 75.5);
}
--------------------------------------------------------------------
//Task 5
import 'dart:convert';


abstract class DataFormatter {
  String format(Map<String, dynamic> data);
}
class JSONFormatter implements DataFormatter {
  @override
  String format(Map<String, dynamic> data) {
    return jsonEncode(data);
  }
}
class KeyValueFormatter implements DataFormatter {
  @override
  String format(Map<String, dynamic> data) {
    return data.entries.map((e) => '${e.key}: ${e.value}').join('\n');
  }
}
void main() {
  var sampleData = {'name': 'Alice', 'age': 25, 'city': 'Paris'};

  List<DataFormatter> formatters = [JSONFormatter(), KeyValueFormatter()];

  for (var formatter in formatters) {
    print('--- ${formatter.runtimeType} ---');
    print(formatter.format(sampleData));
    print('');
  }
}





--------------------------------------------------------------------
// 6 Async Programming
//Task 2























































































































  
